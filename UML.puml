@startuml
'https://plantuml.com/class-diagram

interface GraphAlgoInterface {

 get_graph(self) -> GraphInterface
 load_from_json(self, file_name: str) -> bool
 save_to_json(self, file_name: str) -> bool
 shortest_path(self, id1: int, id2: int) -> (float, list)
 TSP(self, node_lst: List[int]) -> (List[int], float)
 centerPoint(self) -> (int, float)
 plot_graph(self) -> None

}

interface GraphInterface {

 v_size(self) -> int
 e_size(self) -> int
 get_all_v(self) -> dict
 all_in_edges_of_node(self, id1: int) -> dict
 all_out_edges_of_node(self, id1: int) -> dict
 get_mc(self) -> int
 add_edge(self, id1: int, id2: int, weight: float) -> bool
 add_node(self, node_id: int, pos: tuple = None) -> bool
 remove_node(self, node_id: int) -> bool
 remove_edge(self, node_id1: int, node_id2: int) -> bool

}

class GraphAlgo implements GraphAlgoInterface{

}

class DiGraph implements GraphInterface{
  get_parsed_edges(self) -> list[GraphEdge]
  get_node_map(self) -> dict[int, GraphNode]
  get_node(self, key: int) -> GraphNode
  get_edge(self, src: int, dest: int)
  initiate_edge_maps(self)
}

enum TimeUnit {
    WHITE = 0
    GRAY = 1
    BLACK = 2
}

@enduml