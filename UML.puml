@startuml
'https://plantuml.com/class-diagram

interface GraphAlgoInterface {

 get_graph(self) -> GraphInterface
 load_from_json(self, file_name: str) -> bool
 save_to_json(self, file_name: str) -> bool
 shortest_path(self, id1: int, id2: int) -> (float, list)
 TSP(self, node_lst: List[int]) -> (List[int], float)
 centerPoint(self) -> (int, float)
 plot_graph(self) -> None

}

interface GraphInterface {

 v_size(self) -> int
 e_size(self) -> int
 get_all_v(self) -> dict
 all_in_edges_of_node(self, id1: int) -> dict
 all_out_edges_of_node(self, id1: int) -> dict
 get_mc(self) -> int
 add_edge(self, id1: int, id2: int, weight: float) -> bool
 add_node(self, node_id: int, pos: tuple = None) -> bool
 remove_node(self, node_id: int) -> bool
 remove_edge(self, node_id1: int, node_id2: int) -> bool

}

class GraphAlgo implements GraphAlgoInterface {
 load_nodes(self, nodes) -> bool
 load_edges(self, edges) -> bool
 reset_graph_vars(graph: DiGraph)
 is_connected(self)
 is_connected_dfs(self)
 dfs_traversal(graph_copy, curr_node, scanned_nodes)
 remove_visited_cities(cities: set[int], curr_path: tuple[int])
 get_optimal_path_to_cities(self, cities: set[int])
 get_optimal_path_from_map(cities: set[int], path_map: dict[tuple[int], float]) -> (tuple[int], float)
 get_optimal_path(self, node_id: int, cities: set[int], is_start: bool) -> (tuple[int], float)
 dijkstra(self, src: int) -> dict[int, list[int]]
 dijkstra_minimize(self, src: int)
 find_max(self) -> int
}

class DiGraph implements GraphInterface {
  get_parsed_edges(self) -> list[GraphEdge]
  get_node_map(self) -> dict[int, GraphNode]
  get_node(self, key: int) -> GraphNode
  get_edge(self, src: int, dest: int)
  initiate_edge_maps(self)
}

class GraphEdge {
  get_src(self)
  get_dest(self)
  get_weight(self)
  set_dest(self, dest: int)
  set_src(self, src: int)
  to_json_dict(self)
}

class GraphNode {
  get_srcMap(self)
  get_destMap(self)
  set_srcMap(self, src_map: dict)
  set_destMap(self, dest_map: dict)
  get_dist(self)
  set_dist(self, dist: float)
  get_key(self)
  add_dest(self, edge: GraphEdge)
  add_src(self, edge: GraphEdge)
  remove_dest(self, dest: int) -> GraphEdge
  remove_src(self, src: int) -> GraphEdge
  to_json_dict(self)
  get_pos(self) -> Position
  set_tag(self, tag: NodeTag)
  get_tag(self)
}

class Position {
  get_x(self)
  get_y(self)
  get_z(self):
  get_json_format_str(self)
}

class GraphEncoder {
    default(self, o: Any) -> Any
}

enum NodeTag {
    WHITE = 0
    GRAY = 1
    BLACK = 2
}

Position o-- GraphNode
DiGraph o-- GraphAlgo
DiGraph o-- GraphEncoder
DiGraph <|-- GraphEdge
DiGraph <|-- GraphNode
GraphAlgo o-- NodeTag


@enduml